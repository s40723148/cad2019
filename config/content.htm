<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數</p>
<h1>CMSiMDE</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 是一套以 Python 加上 flask, bs4, lxml, mardown, pelican, flask_cors, leo 等模組所建構的網際內容管理系統.</p>
<p>flask 模組是一套網際程式框架, CMSiMDE 利用此一框架編寫網際相關的函式, 用來執行動態的內容管理系統.</p>
<p>bs4 在 CMSiMDE 擔任解析 config/content.htm 超文件檔案的工作, 根據 h1, h2 與 h3 標註, 對 content.htm 進行分頁, 因此使用者可以透過 3 個階次的內容架構進行編輯.</p>
<p>lxml 模組主要用來將 content.htm 逐一轉換為 content 目錄中的個別檔案, 也就是在 CMSiMDE 動態系統中, 點擊 generate_pages 之後, 呼叫 lxml 模組中的分頁方法, 將動態內容轉為靜態內容.</p>
<p>markdown 與 pelican 在 CMSiMDE 主要用來產生靜態網誌, 而網誌的設計與編輯則透過 Leo Editor 進行, 此外 CMSiMDE 除了網際內容管理與網誌之外, 還透過 Leo Editor 管理 reveal.js 網際簡報系統.</p>
<p>flask_cors 模組, 在 CMSiMDE 是為了配合 Dartpad 程式編寫過程, 需要跨網站擷取資料的需求而加入, 在舊版的可攜系統中若無此模組, 執行 CMSiMDE 之前必須透過</p>
<p>python -m pip install flask_cors </p>
<p>安裝</p><h3>設定識別資料</h3>
<p>1. 設定使用者名稱及電子郵件</p>
<p>git config  --global user.name  "username"</p>
<p><span>git config  --global user.email  "e<span>mail</span>"</span></p>
<p><span>2. 通過代理主機連接HTTP</span></p>
<p><span>git config  --global http.proxy<span> [位址]:連接阜</span></span></p>
<p><span></span></p>
<p></p><h1>Solvespace 編譯</h1>
<h4>編譯步驟:</h4>
<p>git version 查驗 git 版本</p>
<p>git 2.13 版本以上, 可以使用下列 git clone<span> </span><span>--recurse-submodules 取得所有子模組資料</span></p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace</p>
<p>==========================================================</p>
<p>上述指令同:</p>
<p>git clone <span><a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> </span></p>
<p><span>cd solvespace</span></p>
<p><span>git submodule init</span></p>
<p><span>git submodule update</span></p>
<p>==========================================================</p>
<p>編輯Y:\tmp\solvespace\extlib\angle\CMakeLists.txt</p>
<p><span>list(APPEND ANGLE_DEFINITIONS</span><br/><span>-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")</span><br/><span>endif()</span></p>
<p>改為 :</p>
<p><span style="background-color: #0000ff;">#</span>list(APPEND ANGLE_DEFINITIONS<br/><span style="background-color: #0000ff;">#"</span>-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }")<br/>endif()</p>
<p>==========================================================</p>
<p>接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\mingw64\lib 目錄):</p>
<p>cd solvespace</p>
<p>cd extlib</p>
<p>cd libpng</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p>(mingw32-make -Wl,-static)</p>
<p>==========================================================</p>
<p>接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行:</p>
<p><span>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</span><br/><span>mingw32-make</span></p>
<p><iframe height="600" src="/get_page/cube.html" width="800"></iframe></p>
<h2>操作練習</h2>
<p>a simple plate</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9GUsgpK_qEE" width="560"></iframe></p>
<p>three-way connector</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wM_7iGqU3vI" width="560"></iframe></p>
<p class="title style-scope ytd-video-primary-info-renderer"><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">Sketch Rotation around an Axis</yt-formatted-string></p>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SE1mQbN0h7c" width="560"></iframe><br/><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style=""></yt-formatted-string></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">Assembly</yt-formatted-string></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/W-302t9Swq4" width="560"></iframe></p>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer" force-default-style="">a more Complex Model</yt-formatted-string></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qyTRXz3C2PA" width="560"></iframe></p>
<p>Interactive 3D Model in Browser</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Gu-OhnylMVE" width="560"></iframe></p>
<h2>繪圖驗證</h2>
<p>7</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/v7XEyzYSwfM" width="560"></iframe></p>
<p>8</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/j2EW0YKgY0Y" width="560"></iframe></p>
<p>13</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/i2odwUdKlko" width="560"></iframe></p>
<p></p>
<h2>about內容變更</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/w9ZRkZWEYh4" width="560"></iframe></p><h1>V-rep</h1>
<p>參數式繪圖軟體 Solvespace 編譯、零組件繪圖與應用.</p>
<p>利用 <a href="https://drive.google.com/file/d/1fxMdqdCoCL__O1IpZ-Sv-A_4-c77Wx4E/view?usp=sharing">2019Fall可攜套件.7z</a><span> 學習如何完成 <a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a> 原始碼的編譯, 並透過 <a href="http://solvespace.com/">http://solvespace.com</a> 學習如何建立 <a href="https://github.com/mdecourse/mocad/files/3583773/web_vrep2.zip">web_rep2.zip</a> 中所需的行走車.</span></p>
<p><span>其中必須將所建立的零組件轉入 <a href="https://drive.google.com/file/d/1cZFSsLEoGOBYojzKzFEf4YH2l--pbS-9/view?usp=sharing">V-rep 3.6.1 rev 4.7z</a><span> 進行運動組立後, 以 Lua 或 Python 進行控制.</span></span></p>
<p><span><span>網際 V-rep 模型控制:<span> </span><a href="https://github.com/mdecourse/mocad/files/3583773/web_vrep2.zip">web_vrep2.zip</a> (<a href="http://mde.tw/cad2019/downloads/web_vrep2.zip">local</a>)</span></span></p>
<p><span>app.py</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template, redirect
from vrep_linefollower import VrepLineFollower
 
line_follower = VrepLineFollower()
 
app = Flask(__name__)
 
@app.route("/")
def index():
  return render_template('controls.html')
 
@app.route('/do/&lt;direction&gt;')
def do(direction):
  global line_follower
  line_follower.to_direction(direction)
  return redirect('/')
 
 
if __name__ == '__main__':
  app.run(host='127.0.0.1')</pre>
<p></p>
<p><span>vrep_linefollower.py</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import vrep
 
class VrepLineFollower:
  def __init__(self):
    vrep.simxFinish(-1) # just in case, close all opened connections
    self.clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)
 
    self.wheelRadius = 0.027
    self.linearVelocityLeft  = 0.1
    self.linearVelocityRight = 0.1
 
    # vectors [left, right]
    self.direction_v = {
     'up':    [ 0.01,  0.01],
     'down':  [-0.01, -0.01],
     'left':  [-0.01,  0.01],
     'right': [ 0.01, -0.01]
    }
 
    res, self.leftJointDynamic  = vrep.simxGetObjectHandle(self.clientID, "DynamicLeftJoint",  vrep.simx_opmode_oneshot_wait)
    res, self.rightJointDynamic = vrep.simxGetObjectHandle(self.clientID, "DynamicRightJoint", vrep.simx_opmode_oneshot_wait)
 
  # direction = 'up' | 'down' | 'left' | 'right'
  def to_direction(self, direction):
    direction_vector = self.direction_v[direction]
    self.linearVelocityLeft  += direction_vector[0]
    self.linearVelocityRight += direction_vector[1]
    self.set_motors()
 
  # private
  def set_motors(self):
    t_left  = self.linearVelocityLeft  / self.wheelRadius
    t_right = self.linearVelocityRight / self.wheelRadius
    vrep.simxSetJointTargetVelocity(self.clientID, self.leftJointDynamic,  t_left,  vrep.simx_opmode_oneshot_wait)
    vrep.simxSetJointTargetVelocity(self.clientID, self.rightJointDynamic, t_right, vrep.simx_opmode_oneshot_wait)
</pre>
<p></p><h2>零組件繪製</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/khVFSFVisGI" width="560"></iframe></p><h2>網際 V-rep 模型控制</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/AGTT7MwK_ds" width="560"></iframe></p><h2>新增啟動與停止按鈕</h2>